heat_template_version: 2013-05-23

description: Deploy An edX (Birch) Environment

parameters:
  domain:
    type: string
    label: Domain
    default: cloudtrain.me
  environment_extra:
    type: string
    label: Extra Settings
    default: ''

resources:
  password:
    type: OS::Heat::RandomString
    properties:
      length: 12
      sequence: lettersdigits

  keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-keypair"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      save_private_key: True

  network:
    type: Rackspace::Cloud::Network
    properties:
      cidr: 192.168.2.0/24
      label:
        str_replace:
          template: "%prefix%-edx-network"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }

  database:
    type: OS::Trove::Instance
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-database"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 1GB Instance
      size: 5
      networks:
        - network: 00000000-0000-0000-0000-000000000000
        - network: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      datastore_type: "mysql"
      datastore_version: "5.6"
      databases:
        - name: edxapp
        - name: xqueue
        - name: ora
      users:
        - name: admin
          password: { get_attr: [ password, value ] }
          databases:
            - edxapp
            - xqueue
            - ora
        - name: read_only
          password: { get_attr: [ password, value ] }
          databases:
            - edxapp
            - xqueue
            - ora
        - name: migrate
          password: { get_attr: [ password, value ] }
          databases:
            - edxapp
            - xqueue
            - ora
        - name: edxapp001
          password: { get_attr: [ password, value ] }
          databases:
            - edxapp
        - name: xqueue001
          password: { get_attr: [ password, value ] }
          databases:
            - xqueue
        - name: ora001
          password: { get_attr: [ password, value ] }
          databases:
            - ora

  mongo:
    type: https://raw.githubusercontent.com/rackspace-orchestration-templates/mongodb-replset/master/mongodb-replset.yaml
    properties:
      server_hostname:
        str_replace:
          template: "%prefix%-edx-mongo"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      flavor: 1 GB General Purpose v1
      peer_server_count: 3

  memcached:
    type: https://raw.githubusercontent.com/rackspace-orchestration-templates/memcached/master/memcached.yaml
    properties:
      server_hostname:
        str_replace:
          template: "%prefix%-edx-memcached"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      flavor: 1 GB General Purpose v1

  swift_signal_handle_ansible:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_app_00:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_app_01:
    type: OS::Heat::SwiftSignalHandle

  swift_signal_handle_app_02:
    type: OS::Heat::SwiftSignalHandle

  cloud_config_ansible:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - libxml2-dev
          - libxslt1-dev
          - libfreetype6-dev
          - python-pip
          - python-apt
          - python-dev
        runcmd:
          - mkdir -p /opt/cloud-training
          - str_replace:
              template: |
                cat > /opt/cloud-training/id_rsa_app << EOF
                %app_private_key%
                EOF
                cat > /opt/cloud-training/id_rsa_mongo << EOF
                %mongo_private_key%
                EOF
                cat > /opt/cloud-training/id_rsa_memcached << EOF
                %memcached_private_key%
                EOF
                chmod 0600 /opt/cloud-training/id_rsa_app
                chmod 0600 /opt/cloud-training/id_rsa_mongo
                chmod 0600 /opt/cloud-training/id_rsa_memcached
              params:
                "%app_private_key%": { get_attr: [ keypair, private_key ] }
                "%mongo_private_key%": { get_attr: [ mongo, private_key ] }
                "%memcached_private_key%": { get_attr: [ memcached, private_key ] }
          - str_replace:
              template: |
                cat > /opt/cloud-training/inventory << EOF
                [all:vars]
                ansible_ssh_user=root
                
                [app:vars]
                ansible_ssh_private_key_file=/opt/cloud-training/id_rsa_app
                
                [mongo:vars]
                ansible_ssh_private_key_file=/opt/cloud-training/id_rsa_mongo
                
                [memcached:vars]
                ansible_ssh_private_key_file=/opt/cloud-training/id_rsa_memcached
                
                [all]
                %prefix%-edx-app-00       ansible_ssh_host=%app_00_ip%
                %prefix%-edx-app-01       ansible_ssh_host=%app_01_ip%
                %prefix%-edx-app-02       ansible_ssh_host=%app_02_ip%
                %prefix%-edx-mongo-00     ansible_ssh_host=%mongo_00_ip%
                %prefix%-edx-mongo-01     ansible_ssh_host=%mongo_01_ip%
                %prefix%-edx-mongo-02     ansible_ssh_host=%mongo_02_ip%
                %prefix%-edx-memcached    ansible_ssh_host=%memcached_ip%
                
                [app]
                %prefix%-edx-app-00
                %prefix%-edx-app-01
                %prefix%-edx-app-02
                
                [mongo]
                %prefix%-edx-mongo-00
                %prefix%-edx-mongo-01
                %prefix%-edx-mongo-02
                
                [memcached]
                %prefix%-edx-memcached
                
                EOF
                chmod 0600 /opt/cloud-training/inventory
              params:
                "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                "%memcached_ip%": { get_attr: [ memcached, server_ip ] }
                "%mongo_00_ip%": { get_attr: [ mongo, server_public_ips, 0 ] }
                "%mongo_01_ip%": { get_attr: [ mongo, server_public_ips, 1 ] }
                "%mongo_02_ip%": { get_attr: [ mongo, server_public_ips, 2 ] }
                "%app_00_ip%": { get_attr: [ server_app_00, accessIPv4 ] }
                "%app_01_ip%": { get_attr: [ server_app_01, accessIPv4 ] }
                "%app_02_ip%": { get_attr: [ server_app_02, accessIPv4 ] }
          - str_replace:
              template: |
                cat > /opt/cloud-training/environment.yml << EOF
                ---
                edx_platform_version: 'named-release/birch'
                ora2_version: 'named-release/birch'
                certs_version: 'named-release/birch'
                forum_version: 'named-release/birch'
                xqueue_version: 'named-release/birch'
                
                migrate_db: 'yes'
                openid_workaround: True
                
                # Not sure about this one.
                ENABLE_LEGACY_ORA: !!null
                
                EDXAPP_PLATFORM_NAME: 'Rackspace Training (%prefix%)'
                EDXAPP_PREVIEW_LMS_BASE: 'preview.edx.%prefix%.%domain%'
                EDXAPP_LMS_BASE: 'edx.%prefix%.%domain%'
                
                EDXAPP_LMS_SITE_NAME: 'edx.%prefix%.%domain%'
                EDXAPP_CMS_SITE_NAME: 'studio.edx.%prefix%.%domain%'
                
                NGINX_SET_X_FORWARDED_HEADERS: False
                
                EDXAPP_LMS_NGINX_PORT: 80
                EDXAPP_LMS_PREVIEW_NGINX_PORT: 80
                EDXAPP_CMS_NGINX_PORT: 80
                
                EDXAPP_MYSQL_DB_NAME: 'edxapp'
                EDXAPP_MYSQL_USER: 'edxapp001'
                EDXAPP_MYSQL_PASSWORD: '%database_password%'
                EDXAPP_MYSQL_HOST: '%database_hostname%'
                EDXAPP_MYSQL_PORT: '3306'
                
                XQUEUE_MYSQL_DB_NAME: 'xqueue'
                XQUEUE_MYSQL_USER: 'xqueue001'
                XQUEUE_MYSQL_PASSWORD: '%database_password%'
                XQUEUE_MYSQL_HOST: '%database_hostname%'
                XQUEUE_MYSQL_PORT: '3306'
                
                ORA_MYSQL_DB_NAME: 'ora'
                ORA_MYSQL_USER: 'ora001'
                ORA_MYSQL_PASSWORD: '%database_password%'
                ORA_MYSQL_HOST: '%database_hostname%'
                ORA_MYSQL_PORT: '3306'
                
                COMMON_MYSQL_READ_ONLY_USER: 'read_only'
                COMMON_MYSQL_READ_ONLY_PASS: '%database_password%'
                COMMON_MYSQL_ADMIN_USER: 'admin'
                COMMON_MYSQL_ADMIN_PASS: '%database_password%'
                COMMON_MYSQL_MIGRATE_USER: 'migrate'
                COMMON_MYSQL_MIGRATE_PASS: '%database_password%'
                
                EDXAPP_MEMCACHE: [ '%memcached_ip%:11211' ]
                
                EDXAPP_MONGO_DB_NAME: 'edxapp'
                EDXAPP_MONGO_USER: 'edxapp'
                EDXAPP_MONGO_PASSWORD: '%mongo_password%'
                EDXAPP_MONGO_HOSTS: %mongo_ips%
                EDXAPP_MONGO_PORT: '27017'
                
                FORUM_MONGO_DATABASE: 'cs_comments_service'
                FORUM_MONGO_USER: 'cs_comments_service'
                FORUM_MONGO_PASSWORD: '%mongo_password%'
                FORUM_MONGO_HOSTS:  %mongo_ips%
                FORUM_MONGO_PORT: '27017'
                
                MONGO_USERS:
                  - database: 'cs_comments_service'
                    user: 'cs_comments_service'
                    password: '%mongo_password%'
                    roles: 'readWrite'
                  - database: 'edxapp'
                    user: 'edxapp'
                    password: '%mongo_password%'
                    roles: 'readWrite'
                
                %environment_extra%
                EOF
                chmod 0600 /opt/cloud-training/environment.yml
              params:
                "%database_hostname%": { get_attr: [ database, hostname ] }
                "%database_password%": { get_attr: [ password, value ] }
                "%memcached_ip%": { get_attr: [ memcached, server_ip ] }
                "%mongo_password%": { get_attr: [ password, value ] }
                "%mongo_ips%": { "Fn::Join": [ "", [ "[ '", { "Fn::Join": [ "', '", { get_attr: [ mongo, server_public_ips ] } ] } , "' ]" ] ] }
                "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                "%domain%": { get_param: domain }
                "%environment_extra%": { get_param: environment_extra }
          - str_replace:
              template: |
                cat > /opt/cloud-training/runcmd-bash << EOF
                #!/bin/bash
                export HOME="/root"
                set -e
                set -x
                function exit_failure {
                  %swift_signal_notify% --data-binary '{"status": "FAILURE", "reason": "'"\$@"'"}'
                  exit 1
                }
                function exit_success {
                  %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
                }
                /usr/bin/pip install --upgrade pip || exit_failure "PIP Upgrade PIP Failure"
                /usr/local/bin/pip install --upgrade virtualenv || exit_failure "PIP Install Virtual Environment Failure"
                cd /opt/cloud-training
                git clone https://github.com/cloud-training/edx-heat-ansible.git || exit_failure "Git Clone Failure"
                cd /opt/cloud-training/edx-heat-ansible
                git checkout master || exit_failure "Git Checkout Failure"
                cd /var/tmp
                git clone -b release https://github.com/cloud-training/configuration.git || exit_failure "Git Clone Failure"
                cd /var/tmp/configuration
                git checkout cloud-training-birch || exit_failure "Git Checkout Failure"
                /usr/local/bin/pip install -r requirements.txt || exit_failure "PIP Install Requirements Failure"
                cd /var/tmp/configuration/playbooks
                ln -s /opt/cloud-training/edx-heat-ansible/playbooks/playbook-ansible.yml
                ansible-playbook playbook-ansible.yml -i /opt/cloud-training/inventory -vv || exit_failure "Ansible Playbook Run Failure"
                exit_success
                EOF
                chmod 0700 /opt/cloud-training/runcmd-bash
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_ansible, curl_cli ] }
          - /opt/cloud-training/runcmd-bash

  cloud_config_app_00:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - libxml2-dev
          - libxslt1-dev
          - libfreetype6-dev
          - python-pip
          - python-apt
          - python-dev
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_app_00, curl_cli ] }

  cloud_config_app_01:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - libxml2-dev
          - libxslt1-dev
          - libfreetype6-dev
          - python-pip
          - python-apt
          - python-dev
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_app_01, curl_cli ] }

  cloud_config_app_02:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        output:
          all: '| tee -a /var/log/cloud-init-output.log'
        apt_upgrade: true
        packages:
          - tmux
          - htop
          - multitail
          - build-essential
          - software-properties-common
          - python-software-properties
          - curl
          - git-core
          - libxml2-dev
          - libxslt1-dev
          - libfreetype6-dev
          - python-pip
          - python-apt
          - python-dev
        runcmd:
          - str_replace:
              template: |
                %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
              params:
                "%swift_signal_notify%": { get_attr: [ swift_signal_handle_app_02, curl_cli ] }

  server_ansible:
    type: OS::Nova::Server
    depends_on: [ swift_signal_app_00, swift_signal_app_01, swift_signal_app_02 ]
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-ansible"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 2 GB General Purpose v1
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_ansible }

  server_app_00:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-app_00"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 8 GB General Purpose v1
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_app_00 }

  server_app_01:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-app_01"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 8 GB General Purpose v1
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_app_01 }

  server_app_02:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-app_02"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      flavor: 8 GB General Purpose v1
      image: Ubuntu 12.04 LTS (Precise Pangolin) (PVHVM)
      networks:
        - uuid: 00000000-0000-0000-0000-000000000000
        - uuid: 11111111-1111-1111-1111-111111111111
        - network: { get_resource: network }
      key_name: { get_resource: keypair }
      admin_pass: { get_attr: [ password, value ] }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_app_02 }

  loadbalancer:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name:
        str_replace:
          template: "%prefix%-edx-loadbalancer"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
      nodes:
        - addresses:
          - { get_attr: [ server_app_00, accessIPv4 ] }
          - { get_attr: [ server_app_01, accessIPv4 ] }
          - { get_attr: [ server_app_02, accessIPv4 ] }
          port: 80
      port: 80
      protocol: HTTP
      virtualIps:
        - ipVersion: IPV4
          type: PUBLIC
      healthMonitor:
        type: HTTP
        delay: 30 
        timeout: 5
        attemptsBeforeDeactivation: 2
        path: "/"
        statusRegex: "^[234][0-9][0-9]$"

  dns:
    type: Rackspace::Cloud::DNS
    properties:
      name:
        str_replace:
          template: "%prefix%.%domain%"
          params:
            "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
            "%domain%": { get_param: domain }
      emailAddress: ipadmin@stabletransit.com
      records:
        - type: A
          data: { get_attr: [ loadbalancer, PublicIp ] }
          name:
            str_replace:
              template: "edx.%prefix%.%domain%"
              params:
                "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                "%domain%": { get_param: domain }
        - type: A
          data: { get_attr: [ loadbalancer, PublicIp ] }
          name:
            str_replace:
              template: "preview.edx.%prefix%.%domain%"
              params:
                "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                "%domain%": { get_param: domain }
        - type: A
          data: { get_attr: [ loadbalancer, PublicIp ] }
          name:
            str_replace:
              template: "studio.edx.%prefix%.%domain%"
              params:
                "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
                "%domain%": { get_param: domain }

  swift_signal_ansible:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_ansible }
      count: 1
      timeout: 7200

  swift_signal_app_00:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_app_00 }
      count: 1
      timeout: 7200

  swift_signal_app_01:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_app_01 }
      count: 1
      timeout: 7200

  swift_signal_app_02:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle_app_02 }
      count: 1
      timeout: 7200

outputs:
  password:
    description: Password
    value: { get_attr: [ password, value ] }
  private_key:
    description: Private Key App
    value: { get_attr: [ keypair, private_key ] }
  private_key_memcached:
    description: Private Key Memcached
    value: { get_attr: [ memcached, private_key ] }
  private_key_mongo:
    description: Private Key Mongo
    value: { get_attr: [ mongo, private_key ] }
  url_lms:
    description: LMS URL
    value:
      str_replace:
        template: "http://edx.%prefix%.%domain%/"
        params:
          "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
          "%domain%": { get_param: domain }
  url_lms_preview:
    description: LMS (Preview) URL
    value:
      str_replace:
        template: "http://preview.edx.%prefix%.%domain%/"
        params:
          "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
          "%domain%": { get_param: domain }
  url_cms:
    description: CMS URL
    value:
      str_replace:
        template: "http://studio.edx.%prefix%.%domain%/"
        params:
          "%prefix%": { "Fn::Select": [ "0", { "Fn::Split" : [ "-", { get_param: "OS::stack_id" } ] } ] }
          "%domain%": { get_param: domain }
